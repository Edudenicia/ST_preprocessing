leaflet() %>% addTiles() %>%
addRasterImage(bu, colors = pal, opacity = 0.5) %>%
addLegend(pal = pal, values = values(bu),
title = my_city)
plot(bu)
pal <- colorNumeric(c("#0C2C84", "#FFFFCC"), values(bu),
na.color = "transparent")
leaflet() %>% addTiles() %>%
addRasterImage(bu, colors = pal, opacity = 0.5) %>%
addLegend(pal = pal, values = values(bu),
title = my_city)
bu
summary(bu)
values(bu)
pal <- colorNumeric(c("#0C2C84", "#FFFFCC"), values(bu),
na.color = "transparent")
pal <- colorFactor(c("#0C2C84", "#FFFFCC"), values(bu),
na.color = "transparent")
leaflet() %>% addTiles() %>%
addRasterImage(bu, colors = ~pal(bu), opacity = 0.5)
leaflet() %>% addTiles() %>%
addRasterImage(bu, colors = pal, opacity = 0.5)
leaflet() %>% addTiles() %>%
addRasterImage(bu, colors = pal, opacity = 0.5) +
addMarkers(lower_left)
View(all_extents)
lower_left
all_extents[2,]
leaflet(all_extents[2,]) %>% addTiles() %>%
addMarkers(lng = ~xmin, lat = ~ymin)
leaflet(all_extents[2,]) %>% addTiles() %>%
addMarkers(lng = ~xmin, lat = ~ymin) %>%
addMarkers(lng = ~xmax, lat = ~ymax) %>%
addRasterImage(bu, colors = pal, opacity = 0.5)
all_files
leaflet(all_extents[2,]) %>% addTiles() %>%
addMarkers(lng = ~xmin, lat = ~ymin) %>%
addMarkers(lng = ~xmax, lat = ~ymax) %>%
leaflet(neStates) %>%
addPolygons(map = readOGR("/Users/ricardo/Library/Mobile Documents/com~apple~CloudDocs/_R/urban_performance/v0.05/_data/palestine/Gaza.shp"))
leaflet(all_extents[2,]) %>% addTiles() %>%
addMarkers(lng = ~xmin, lat = ~ymin) %>%
addMarkers(lng = ~xmax, lat = ~ymax) %>%
addPolygons(map = readOGR("/Users/ricardo/Library/Mobile Documents/com~apple~CloudDocs/_R/urban_performance/v0.05/_data/palestine/Gaza.shp")) %>%
addRasterImage(bu, colors = pal, opacity = 0.5)
leaflet(readOGR("_data/palestine/Gaza.shp")) %>% addTiles()
leaflet(readOGR("_data/palestine/Gaza.shp")) %>% addTiles() %>%
addPolygons()
leaflet(all_extents[2,]) %>% addTiles() %>%
addMarkers(lng = ~xmin, lat = ~ymin) %>%
addMarkers(lng = ~xmax, lat = ~ymax) %>%
addRasterImage(bu, colors = pal, opacity = 0.5)
leaflet(readOGR("_data/palestine/Gaza.shp")) %>% addTiles() %>%
addPolygons()
the_path <- "_data/palestine/"
all_files <- list.files(path = the_path, pattern = "*.shp$")
all_extents <- data.frame(name = character(),
xmin = numeric(),
ymin = numeric(),
xmax = numeric(),
ymax = numeric())
all_extents$name <- as.character(all_extents$name)
for(r in 1:length(all_files)){
print(paste("reading:", all_files[r]))
e = extent(readOGR(paste0(the_path, all_files[r])))
all_extents[r, "name"] <- substr(all_files[r],
start = 1,
stop  = nchar(all_files[r]) - 4 - 0)
all_extents[r, "xmin"] <- e@xmin
all_extents[r, "ymin"] <- e@ymin
all_extents[r, "xmax"] <- e@xmax
all_extents[r, "ymax"] <- e@ymax
}
all_extents
for(city_id in 1:5){
# global variables
city_id <- 2
my_city <- all_extents[city_id, "name"]
print(paste("Selected city:", my_city))
# ---------- resolution: ghsl cell size (please choose one)
# my_cell_size <- '1000m'
# my_cell_size <- '0250m'
my_cell_size <- '0038m'
print(paste("Selected cell size:", my_cell_size))
# ---------- crs: coordinate refference system (R will select the crs based on your selection of cell size)
my_crs <-
list ('1000m' = '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs',
'0250m' = '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs',
'0038m' = "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
)[[my_cell_size]]
# ---------- study area: define your study area with two points (lower-left and top-right)
# lower left:
lower_left <- SpatialPoints(coords = data.frame(x = all_extents[city_id, "xmin"],
y = all_extents[city_id, "ymin"]),
proj4string=CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# top right:
top_right <- SpatialPoints(coords = data.frame(x = all_extents[city_id, "xmax"],
y = all_extents[city_id, "ymax"]),
proj4string=CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# If needed, transform your CRS (R will transform it if needed)
if(as.character(crs(lower_left)) != my_crs){
lower_left <- spTransform(x = lower_left,
CRSobj = my_crs)
}
if(as.character(crs(top_right)) != my_crs){
top_right <- spTransform(x = top_right,
CRSobj = my_crs)
}
# Create the extent (R will create it, based on your definition of study area)
my_extent <- extent(c(as.data.frame(lower_left)$x,
as.data.frame(top_right)$x,
as.data.frame(lower_left)$y,
as.data.frame(top_right)$y))
# spatial data
# ---------- built-up area
# file path for GHSL data
ghsl_file <- paste0('_data/ghsl/', my_cell_size)
if(my_cell_size == '0038m'){
my_pattern <- '\\p2.tif$'
}else{my_pattern <- '*.tif'}
# import raster data
built_up <- stack(lapply(X = list.files(path = ghsl_file,
pattern = my_pattern,
full.names = T),
FUN = raster))
# crop raster stack based on the definition of the study area
built_up <- crop(x = built_up, y = my_extent)
# verify if everything worked properly
levelplot(built_up, main = my_city)
bu <- built_up$X2014_p2
summary(bu)
plot(bu)
pal <- colorFactor(c("#0C2C84", "#FFFFCC"), values(bu),
na.color = "transparent")
leaflet(all_extents[2,]) %>% addTiles() %>%
addMarkers(lng = ~xmin, lat = ~ymin) %>%
addMarkers(lng = ~xmax, lat = ~ymax) %>%
addRasterImage(bu, colors = pal, opacity = 0.5)
leaflet(readOGR("_data/palestine/Gaza.shp")) %>% addTiles() %>%
addPolygons()
# %>%
#   addLegend(pal = pal(bu),
#             title = my_city)
#
histogram(bu)
# # ---------- land uses
# residential_only_polygon <- readOGR("_data/morelia/lu_residential.shp")
# residential_only_polygon <- spTransform(x = residential_only_polygon, CRSobj = my_crs)
# residential_only <- rasterize(x = residential_only_polygon, y = built_up)
# residential_only[!is.na(residential_only)] <- 1
# levelplot(residential_only)
# rm(residential_only_polygon)
# # ---------- population
# population_tabular <- data.frame(y = c(1990, 2000, 2014),
#                                  p = c(492901, 620532, 762431), # data retrived from conapo and inegi
#                                  cell_sum = as.numeric(cellStats(x = built_up, stat = sum)))
# population_tabular$coefficient <- population_tabular$p / population_tabular$cell_sum
# population <- built_up * population_tabular$coefficient
# levelplot(population)
# ---------- nighttime lights
ntl_name <- "ntl_ps"
load(file = paste0("_data/noaa/", ntl_name, ".RData"))
ntl <- eval(parse(text = ntl_name))
ntl <- projectRaster(ntl, crs=my_crs)
ntl <- resample(x = ntl, # new raster will keep this values
y = built_up) # new raster will keep this extent
levelplot(ntl)
# ---------- slope
elevation <- get_elev_raster(locations = built_up,
z = get_elevation_zoom(X1 = as.data.frame(lower_left)$x,
Y1 = as.data.frame(lower_left)$y,
X2 = as.data.frame(top_right)$x,
Y2 = as.data.frame(top_right)$y,
C = my_crs),
src = "aws")
slope <- terrain(x = elevation)
slope <- resample(x = slope, # new raster will keep this values
y = built_up) # new raster will keep this extent
levelplot(slope)
# ---------- roads
# roads_osm <- readOGR("_data/osm/morelia/shape/roads.shp")
# roads_osm <- spTransform(x = roads_osm, CRSobj = my_crs)
# roads_osm <- as(roads_osm, "SpatialPointsDataFrame")
# roads <- distanceFromPoints(object = built_up, xy = roads_osm)
# levelplot(roads)
output_path <- paste0("_output/ps/", my_city, "/")
writeRaster(x = built_up$X1990, filename = paste0(output_path, "built_up_1990.tif"))
writeRaster(x = built_up$X2000, filename = paste0(output_path, "built_up_2000.tif"))
writeRaster(x = built_up$X2014, filename = paste0(output_path, "built_up_2014.tif"))
writeRaster(x = ntl, filename = paste0(output_path, "ntl.tif"))
writeRaster(x = slope, filename = paste0(output_path, "slope.tif"))
}
# for(city_id in 1:5){
# global variables
city_id <- 2
my_city <- all_extents[city_id, "name"]
print(paste("Selected city:", my_city))
# ---------- resolution: ghsl cell size (please choose one)
# my_cell_size <- '1000m'
# my_cell_size <- '0250m'
my_cell_size <- '0038m'
print(paste("Selected cell size:", my_cell_size))
# ---------- crs: coordinate refference system (R will select the crs based on your selection of cell size)
my_crs <-
list ('1000m' = '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs',
'0250m' = '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs',
'0038m' = "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
)[[my_cell_size]]
# ---------- study area: define your study area with two points (lower-left and top-right)
# lower left:
lower_left <- SpatialPoints(coords = data.frame(x = all_extents[city_id, "xmin"],
y = all_extents[city_id, "ymin"]),
proj4string=CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# top right:
top_right <- SpatialPoints(coords = data.frame(x = all_extents[city_id, "xmax"],
y = all_extents[city_id, "ymax"]),
proj4string=CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# If needed, transform your CRS (R will transform it if needed)
if(as.character(crs(lower_left)) != my_crs){
lower_left <- spTransform(x = lower_left,
CRSobj = my_crs)
}
as.character(crs(lower_left))
my_crs
# ---------- study area: define your study area with two points (lower-left and top-right)
# lower left:
lower_left <- SpatialPoints(coords = data.frame(x = all_extents[city_id, "xmin"],
y = all_extents[city_id, "ymin"]),
# proj4string=CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
proj4string=CRS("+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"))
# top right:
top_right <- SpatialPoints(coords = data.frame(x = all_extents[city_id, "xmax"],
y = all_extents[city_id, "ymax"]),
# proj4string=CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
proj4string=CRS("+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"))
# If needed, transform your CRS (R will transform it if needed)
if(as.character(crs(lower_left)) != my_crs){
lower_left <- spTransform(x = lower_left,
CRSobj = my_crs)
}
if(as.character(crs(top_right)) != my_crs){
top_right <- spTransform(x = top_right,
CRSobj = my_crs)
}
# Create the extent (R will create it, based on your definition of study area)
my_extent <- extent(c(as.data.frame(lower_left)$x,
as.data.frame(top_right)$x,
as.data.frame(lower_left)$y,
as.data.frame(top_right)$y))
# spatial data
# ---------- built-up area
# file path for GHSL data
ghsl_file <- paste0('_data/ghsl/', my_cell_size)
if(my_cell_size == '0038m'){
my_pattern <- '\\p2.tif$'
}else{my_pattern <- '*.tif'}
# import raster data
built_up <- stack(lapply(X = list.files(path = ghsl_file,
pattern = my_pattern,
full.names = T),
FUN = raster))
# crop raster stack based on the definition of the study area
built_up <- crop(x = built_up, y = my_extent)
# verify if everything worked properly
levelplot(built_up, main = my_city)
bu <- built_up$X2014_p2
summary(bu)
plot(bu)
pal <- colorFactor(c("#0C2C84", "#FFFFCC"), values(bu),
na.color = "transparent")
leaflet(all_extents[2,]) %>% addTiles() %>%
addMarkers(lng = ~xmin, lat = ~ymin) %>%
addMarkers(lng = ~xmax, lat = ~ymax) %>%
addRasterImage(bu, colors = pal, opacity = 0.5)
leaflet(readOGR("_data/palestine/Gaza.shp")) %>% addTiles() %>%
addPolygons()
leaflet() %>% addTiles() %>%
addRasterImage(bu, colors = pal, opacity = 0.5)
leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
addRasterImage(bu, colors = pal, opacity = 0.5)
pal <- colorFactor(c("#0C2C84", "red"), values(bu),
na.color = "transparent")
leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
addRasterImage(bu, colors = pal, opacity = 0.5)
pal <- colorFactor(c("white", "red"), values(bu),
na.color = "transparent")
leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
addRasterImage(bu, colors = pal, opacity = 0.5)
leaflet() %>% addProviderTiles(providers$Esri.WorldImagery) %>%
addRasterImage(bu, colors = pal, opacity = 0.5)
pal <- colorFactor(c("black", "red"), values(bu),
na.color = "transparent")
leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
addRasterImage(bu, colors = pal, opacity = 0.5)
leaflet() %>% addProviderTiles(providers$Esri.WorldImagery) %>%
addRasterImage(bu, colors = pal, opacity = 0.5)
writeRaster(x = built_up$X2014_p2, filename = "Gaza_2014_0038.tif")
writeRaster(x = built_up$X2000_p2, filename = "Gaza_2000_0038.tif")
writeRaster(x = built_up$X1990_p2, filename = "Gaza_1990_0038.tif")
get_elevation_zoom(X1 = as.data.frame(lower_left)$x,
Y1 = as.data.frame(lower_left)$y,
X2 = as.data.frame(top_right)$x,
Y2 = as.data.frame(top_right)$y,
C = my_crs)
# ---------- slope
elevation <- get_elev_raster(locations = built_up,
z = get_elevation_zoom(X1 = as.data.frame(lower_left)$x,
Y1 = as.data.frame(lower_left)$y,
X2 = as.data.frame(top_right)$x,
Y2 = as.data.frame(top_right)$y,
C = my_crs),
src = "aws")
slope <- terrain(x = elevation)
slope <- resample(x = slope, # new raster will keep this values
y = built_up) # new raster will keep this extent
levelplot(slope)
elevation <- resample(x = elevation, # new raster will keep this values
y = built_up) # new raster will keep this extent
levelplot(elevation)
getwd()
writeRaster(slope, "slope.tif")
writeRaster(elevation, "elevation.tif")
install.packages("highr")
library(highr)
hilight("x=1 # assignment")
txt = c("a <- 1 # something", "c(y=\"world\", z=\"hello\")", "b=function(x=5) {",
"for(i in 1:10) {
if (i < x) print(i) else break}}", "z@child # S4 slot",
"'special chars <>#$%&_{}'")
cat(hi_latex(txt), sep = "\n")
cat(hi_html(txt), sep = "\n")
all_extents
ghsl_crs <- '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs' # for 1k and 250m
user_crs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
lower_left <- SpatialPoints(coords = data.frame(x = -99.5106,
y = 18.92247),
proj4string=CRS(user_crs))
top_right <- SpatialPoints(coords = data.frame(x = -98.5986,
y = 20.01847),
proj4string=CRS(user_crs))
library(raster)
library(rasterVis)
library(sp)
# User input CRS
user_crs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
# lower left:
lower_left <- SpatialPoints(coords = data.frame(x = -99.5106,
y = 18.92247),
proj4string=CRS(user_crs))
# top right:
top_right <- SpatialPoints(coords = data.frame(x = -98.5986,
y = 20.01847),
proj4string=CRS(user_crs))
# GHSL CRS
ghsl_crs <- '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs'   # for 1000m and 250m
# If needed, R will make the transformation.
if(as.character(crs(lower_left)) != ghsl_crs){
lower_left <- spTransform(x = lower_left,
CRSobj = ghsl_crs)
}
if(as.character(crs(top_right)) != ghsl_crs){
top_right <- spTransform(x = top_right,
CRSobj = ghsl_crs)
}
my_extent <- extent(c(as.data.frame(lower_left)$x,
as.data.frame(top_right)$x,
as.data.frame(lower_left)$y,
as.data.frame(top_right)$y))
levelplot(built_up)
getwd()
list.files()
# install.packages('raster')    # Run only once
# install.packages('rasterVis') # Run only once
# install.packages('sp')        # Run only once
# install.packages('leaflet')   # Run only once
library(raster)
library(rasterVis)
library(sp)
library(leaflet)
# User input CRS
user_crs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
# lower left:
lower_left <- SpatialPoints(coords = data.frame(x = -99.5106,
y = 18.92247),
proj4string=CRS(user_crs))
# top right:
top_right <- SpatialPoints(coords = data.frame(x = -98.5986,
y = 20.01847),
proj4string=CRS(user_crs))
# GHSL CRS
ghsl_crs <- '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs'   # for 1000m and 250m
# If needed, R will make the transformation.
if(as.character(crs(lower_left)) != ghsl_crs){
lower_left <- spTransform(x = lower_left,
CRSobj = ghsl_crs)
}
if(as.character(crs(top_right)) != ghsl_crs){
top_right <- spTransform(x = top_right,
CRSobj = ghsl_crs)
}
my_extent <- extent(c(as.data.frame(lower_left)$x,
as.data.frame(top_right)$x,
as.data.frame(lower_left)$y,
as.data.frame(top_right)$y))
my_extent <- extent(c(as.data.frame(lower_left)$x,
as.data.frame(top_right)$x,
as.data.frame(lower_left)$y,
as.data.frame(top_right)$y))
# crop raster stack based on the definition of the study area
built_up <- crop(x = raster("_data/2014.tif"),
y = my_extent)
leaflet() %>% addTiles() %>%
addRasterImage(built_up, opacity = 0.5)
leaflet() %>% addTiles(options = providerTileOptions(minZoom = 11, maxZoom = 10)) %>%
addRasterImage(built_up, opacity = 0.5)
leaflet() %>% addTiles(options = providerTileOptions(minZoom = 11, maxZoom = 14)) %>%
addRasterImage(built_up, opacity = 0.5)
leaflet() %>% addTiles(options = providerTileOptions(minZoom = 12, maxZoom = 14)) %>%
addRasterImage(built_up, opacity = 0.5)
leaflet() %>% addTiles(options = providerTileOptions(minZoom = 13, maxZoom = 14)) %>%
addRasterImage(built_up, opacity = 0.5)
leaflet() %>% addTiles(options = providerTileOptions(minZoom = 14, maxZoom = 14)) %>%
addRasterImage(built_up, opacity = 0.5)
leaflet() %>% addTiles() %>%
addRasterImage(built_up, opacity = 0.5)
library(raster)
library(rgdal)
library(sp)
library(leaflet)
hospitals <- read.csv("input/hospitals.csv")
setwd('/Users/ricardo/GitHub/ST_preprocessing/distance_raster/')
hospitals <- read.csv("input/hospitals.csv")
getwd()
list.files()
list.files("_input")
hospitals <- read.csv("_input/hospitals.csv")
built_up  <- raster("_input/built_up_mexico_city.tif")
leaflet() %>% addTiles() %>%
addMarkers(hospitals) %>%
addRasterImage(built_up, opacity = 0.5)
hospitals <- read.csv("_input/hospitals.csv")
built_up  <- raster("_input/built_up_mexico_city.tif")
leaflet() %>% addTiles() %>%
addMarkers(hospitals) %>%
addRasterImage(built_up, opacity = 0.5)
leaflet() %>% addTiles() %>%
addMarkers(hospitals)
leaflet(hospitals) %>% addTiles() %>%
addMarkers(lng = ~lng, lat = ~lat)
leaflet(hospitals) %>% addTiles() %>%
addMarkers(lng = ~lng, lat = ~lat) %>%
addRasterImage(built_up, opacity = 0.5)
points <- coordinates(hospitals[c("lng", "lat")])
result <- distanceFromPoints(object = built_up, xy = points)
levelplot(result)
points <- coordinates(hospitals[c("lat", "lng")])
result <- distanceFromPoints(object = built_up, xy = points)
levelplot(result)
head(hospitals)
points <- coordinates(hospitals[c("lng", "lat")])
result <- distanceFromPoints(object = built_up, xy = points)
levelplot(result)
points
distance_raster <- distanceFromPoints(object = built_up, xy = points)
leaflet() %>% addTiles() %>%
addRasterImage(distance_raster, opacity = 0.5)
ghsl_crs
ghsl_crs <- '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs'   # for 1000m and 250m
points <- spTransform(x = coordinates(hospitals[c("lng", "lat")]),
CRSobj = ghsl_crs)
class(coordinates(hospitals[c("lng", "lat")])
points <- spTransform(x = coordinates(hospitals[c("lng", "lat")]),
class(coordinates(hospitals[c("lng", "lat")]))
points <- SpatialPointsDataFrame(coords = xy, data = hospitals[3:2],
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
ghsl_crs <- '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs'   # for 1000m and 250m
points <- SpatialPointsDataFrame(coords = xy, data = coordinates(hospitals[c("lng", "lat")]),
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
points <- SpatialPointsDataFrame(coords = hospitals[c("lng", "lat")], data = hospitals,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
points <- spTransform(x = points, CRSobj = ghsl_crs)
distance_raster <- distanceFromPoints(object = built_up, xy = points)
leaflet() %>% addTiles() %>%
addRasterImage(distance_raster, opacity = 0.5)
library(raster)
library(rgdal)
library(sp)
library(leaflet)
built_up  <- raster("_input/denpasar_builtup.tif")
plot(built_up)
hospitals <- read.csv("_input/hospitals.csv")
plot(hospitals[c("lng", "lat")])
ghsl_crs <- '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs'
# Read the hospitals data
points <- SpatialPointsDataFrame(coords = hospitals[c("lng", "lat")], data = hospitals,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
# Transform the CRS
points <- spTransform(x = points, CRSobj = ghsl_crs)
distances <- distanceFromPoints(object = built_up, xy = points)
plot(distances)
# Lastly, we will "mask" the raster to keep only those cells inside CDMX
distance_raster <- mask(x = distances, mask = built_up)
plot(distance_raster)
pal <- colorNumeric(c("#556270", "#4ECDC4", "#C7F464", "#FF6B6B", "#C44D58"),
values(distance_raster),
na.color = "transparent")
leaflet() %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addRasterImage(distance_raster, colors = pal, opacity = 0.5) %>%
addLegend(pal = pal, values = values(distance_raster),
title = "Distance in meters")
writeRaster(distance_raster, filename = "_output/distance_raster.tif", overwrite = TRUE)
